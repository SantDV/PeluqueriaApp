@page "/"
@using PeluqueriaApp.Data
@using PeluqueriaApp.Models
@using Microsoft.JSInterop
@inject IJSRuntime JS

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">

<div class="container-fluid py-4" style="background-color: #f8f9fa; min-height: 100vh;">
    <div class="container">
        <!-- HEADER -->
        <div class="text-center mb-4">
            <h1 class="display-4 fw-bold mb-2 text-primary">
                <i class="bi bi-calendar-check"></i> Gestor de Turnos
            </h1>
            <p class="lead text-secondary">Administra los turnos de tu peluquería de forma profesional</p>
        </div>

        <!-- FORMULARIO DE CARGA -->
        <div class="card shadow-lg mb-4 border-0">
            <div class="card-header bg-primary text-white py-3">
                <h5 class="mb-0"><i class="bi bi-plus-circle"></i> Nuevo Turno</h5>
            </div>
            <div class="card-body p-4">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label fw-semibold">
                            <i class="bi bi-person"></i> Nombre del Cliente
                        </label>
                        <input @bind="nuevoTurno.Nombre"
                               class="form-control form-control-lg"
                               placeholder="Ingrese nombre" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-semibold">
                            <i class="bi bi-telephone"></i> Teléfono
                        </label>
                        <input @bind="nuevoTurno.Telefono"
                               class="form-control form-control-lg"
                               placeholder="Ingrese teléfono" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-semibold">
                            <i class="bi bi-clock"></i> Fecha y Hora
                        </label>
                        <input type="datetime-local"
                               class="form-control form-control-lg"
                               value="@(fecha?.ToString("yyyy-MM-ddTHH:mm") ?? "")"
                               @onchange="@((ChangeEventArgs e) => ActualizarFecha(e))" />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button class="btn btn-success btn-lg w-100 shadow-sm" @onclick="() => AgregarTurno()">
                            <i class="bi bi-plus-lg"></i> Agregar
                        </button>
                    </div>

                    <!-- CAMPO NOTA -->
                    <div class="col-12">
                        <label class="form-label fw-semibold">
                            <i class="bi bi-pencil-square"></i> Nota
                        </label>
                        <textarea @bind="nuevoTurno.Nota"
                                  class="form-control form-control-lg"
                                  rows="2"></textarea>             
                    </div>
                </div>
            </div>
        </div>

        <!-- NAVEGACIÓN DE SEMANAS -->
        <div class="card shadow-lg mb-4 border-0">
            <div class="card-body p-3">
                <div class="row align-items-center g-2">
                    <div class="col-auto">
                        <button class="btn btn-outline-primary btn-lg" @onclick="SemanaAnterior">
                            <i class="bi bi-chevron-left"></i> Anterior
                        </button>
                    </div>
                    <div class="col text-center">
                        <h4 class="mb-2 fw-bold text-primary">
                            <i class="bi bi-calendar-week"></i>
                            Semana del @inicioSemana.ToString("dd/MM") al @inicioSemana.AddDays(6).ToString("dd/MM/yyyy")
                        </h4>
                        <div class="d-flex justify-content-center gap-2">
                            <button class="btn btn-sm btn-info text-white" @onclick="IrAHoy">
                                <i class="bi bi-calendar-day"></i> Ir a Hoy
                            </button>
                            <button class="btn btn-sm btn-warning text-white" @onclick="() => mostrarSelector = !mostrarSelector">
                                <i class="bi bi-calendar3"></i> Seleccionar Fecha
                            </button>
                        </div>
                        @if (mostrarSelector)
                        {
                            <div class="mt-3 p-3 bg-light rounded">
                                <label class="form-label fw-semibold">Seleccione una fecha para ir a esa semana:</label>
                                <div class="d-flex justify-content-center gap-2">
                                    <input type="date"
                                           class="form-control"
                                           style="max-width: 200px;"
                                           value="@fechaSeleccionada?.ToString("yyyy-MM-dd")"
                                           @onchange="IrAFechaSeleccionada" />
                                    <button class="btn btn-secondary" @onclick="() => mostrarSelector = false">
                                        <i class="bi bi-x-lg"></i> Cerrar
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-outline-primary btn-lg" @onclick="SemanaSiguiente">
                            Siguiente <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- CALENDARIO SEMANAL -->
        <div class="row g-3">
            @foreach (var dia in diasSemana)
            {
                var esHoy = dia.Date == DateTime.Today;
                var colorCard = esHoy ? "border-warning border-3" : "";

                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card shadow-sm h-100 @colorCard">
                        <div class="card-header text-white py-3"
                             style="background: linear-gradient(135deg, @(esHoy ? "#f093fb 0%, #f5576c 100%" : "#4facfe 0%, #00f2fe 100%"))">
                            <h6 class="mb-0 fw-bold text-center">
                                @if (esHoy)
                                {
                                    <i class="bi bi-star-fill"></i>
                                }
                                @dia.ToString("dddd").ToUpper()
                            </h6>
                            <div class="text-center small">@dia.ToString("dd/MM/yyyy")</div>
                        </div>
                        <div class="card-body p-2" style="max-height: 400px; overflow-y: auto;">
                            @if (turnosPorDia.ContainsKey(dia) && turnosPorDia[dia].Count > 0)
                            {
                                @foreach (var t in turnosPorDia[dia])
                                {
                                    <div class="card mb-2 border-start border-primary border-4 shadow-sm">
                                        <div class="card-body p-2">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <div class="d-flex align-items-center mb-1">
                                                        <span class="badge bg-primary me-2">
                                                            <i class="bi bi-clock"></i> @t.FechaHora.ToString("HH:mm")
                                                        </span>
                                                    </div>
                                                    <div class="fw-bold text-dark mb-1">
                                                        <i class="bi bi-person-circle"></i> @t.Nombre
                                                    </div>
                                                    <div class="small text-muted">
                                                        <i class="bi bi-telephone"></i> @t.Telefono
                                                    </div>

                                                    @if (!string.IsNullOrWhiteSpace(t.Nota))
                                                    {
                                                        <div class="small text-secondary mt-1">
                                                            <i class="bi bi-pencil"></i> @t.Nota
                                                        </div>
                                                    }
                                                </div>
                                                <button class="btn btn-danger btn-sm ms-2"
                                                        @onclick="() => EliminarTurno(t)"
                                                        title="Eliminar turno">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center text-muted py-5">
                                    <i class="bi bi-calendar-x display-4"></i>
                                    <p class="mt-2 mb-0">Sin turnos</p>
                                </div>
                            }
                        </div>
                        @if (turnosPorDia.ContainsKey(dia) && turnosPorDia[dia].Count > 0)
                        {
                            <div class="card-footer bg-light text-center small">
                                <i class="bi bi-calendar-check"></i> @turnosPorDia[dia].Count turno(s)
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.2) !important;
        }

    .btn {
        transition: all 0.3s;
    }

        .btn:hover {
            transform: scale(1.05);
        }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .badge {
        font-size: 0.85rem;
    }

    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
    }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
</style>

@code {
    private List<Turno> turnos = new();
    private Turno nuevoTurno = new();
    private DateTime? fecha;
    private DateTime inicioSemana;
    private List<DateTime> diasSemana = new();
    private Dictionary<DateTime, List<Turno>> turnosPorDia = new();
    private bool mostrarSelector = false;
    private DateTime? fechaSeleccionada;

    protected override void OnInitialized()
    {
        try
        {
            turnos = TurnoStorage.Cargar();
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", $"Error al cargar: {ex.Message}");
            turnos = new List<Turno>();
        }

        inicioSemana = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
        GenerarDiasSemana();
        AgruparTurnosPorDia();
    }

    private void ActualizarFecha(ChangeEventArgs e)
    {
        if (e.Value != null && DateTime.TryParse(e.Value.ToString(), out var resultado))
        {
            fecha = resultado;
        }
    }

    private async Task AgregarTurno()
    {
        try
        {
            if (fecha is null)
            {
                await JS.InvokeVoidAsync("alert", "Por favor, seleccione una fecha y hora");
                return;
            }

            if (string.IsNullOrWhiteSpace(nuevoTurno.Nombre))
            {
                await JS.InvokeVoidAsync("alert", "Por favor, ingrese el nombre del cliente");
                return;
            }

            nuevoTurno.FechaHora = fecha.Value;
            turnos.Add(nuevoTurno);
            TurnoStorage.Guardar(turnos);

            nuevoTurno = new Turno();
            fecha = null;

            AgruparTurnosPorDia();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void EliminarTurno(Turno turno)
    {
        turnos.Remove(turno);
        TurnoStorage.Guardar(turnos);
        AgruparTurnosPorDia();
    }

    private void AgruparTurnosPorDia()
    {
        turnosPorDia = turnos
            .GroupBy(t => t.FechaHora.Date)
            .ToDictionary(
                g => g.Key,
                g => g.OrderBy(t => t.FechaHora).ToList()
            );
        StateHasChanged();
    }

    private void GenerarDiasSemana()
    {
        diasSemana.Clear();
        for (int i = 0; i < 7; i++)
        {
            diasSemana.Add(inicioSemana.AddDays(i));
        }
    }

    private void SemanaAnterior()
    {
        inicioSemana = inicioSemana.AddDays(-7);
        GenerarDiasSemana();
        StateHasChanged();
    }

    private void SemanaSiguiente()
    {
        inicioSemana = inicioSemana.AddDays(7);
        GenerarDiasSemana();
        StateHasChanged();
    }

    private void IrAHoy()
    {
        inicioSemana = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
        GenerarDiasSemana();
        mostrarSelector = false;
        StateHasChanged();
    }

    private void IrAFechaSeleccionada(ChangeEventArgs e)
    {
        if (e.Value != null && DateTime.TryParse(e.Value.ToString(), out var fecha))
        {
            fechaSeleccionada = fecha;
            inicioSemana = fecha.AddDays(-(int)fecha.DayOfWeek);
            GenerarDiasSemana();
            mostrarSelector = false;
            StateHasChanged();
        }
    }
}
